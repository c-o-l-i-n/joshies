import { inject, Injectable, Signal } from '@angular/core';
import {
  GameboardSpaceModel,
  MovesForCurrentRoundModel,
  OmitAutoGeneratedColumns,
} from '../util/supabase-types';
import {
  PostgrestResponse,
  PostgrestSingleResponse,
  SupabaseClient,
} from '@supabase/supabase-js';
import {
  Function,
  GameboardSpaceEffect,
  realtimeUpdatesFromTable,
  Table,
  View,
} from '../util/supabase-helpers';
import { GameboardSpaceEntryFormModel } from '../../gm-tools/feature/gameboard-space-entry-page.component';
import { Database, Json } from '../util/schema';
import { map, Observable, shareReplay } from 'rxjs';
import { whenNotNull } from '../util/rxjs-helpers';
import { toSignal } from '@angular/core/rxjs-interop';
import { GameStateService } from './game-state.service';

@Injectable({
  providedIn: 'root',
})
export class GameboardService {
  private readonly supabase: SupabaseClient<Database> = inject(SupabaseClient);
  private readonly gameStateService = inject(GameStateService);

  readonly gameboardSpaces$: Observable<GameboardSpaceModel[] | null> =
    this.gameStateService.sessionId$.pipe(
      whenNotNull((activeSessionId) =>
        (
          realtimeUpdatesFromTable(
            this.supabase,
            Table.GameboardSpace,
            `session_id=eq.${activeSessionId}`,
          ) as Observable<GameboardSpaceModel[]>
        ).pipe(map((spaces) => spaces.sort((a, b) => a.id - b.id))),
      ),
      shareReplay(1),
    );

  readonly gameboardSpaces: Signal<GameboardSpaceModel[] | null | undefined> =
    toSignal(this.gameboardSpaces$);

  async createNewGameboardSpaceType<T extends GameboardSpaceEffect>(
    gameboardSpace: OmitAutoGeneratedColumns<GameboardSpaceModel<T>>,
  ): Promise<PostgrestSingleResponse<null>> {
    return (
      this.supabase
        .from(Table.GameboardSpace)
        // @ts-expect-error: for whatever reason, this doesn't accept the effect_data type as JSON
        .insert(gameboardSpace)
    );
  }

  async updateGameboardSpaceType<T extends GameboardSpaceEffect>(
    gameboardSpaceId: number,
    partialGameboardSpace: Partial<
      OmitAutoGeneratedColumns<GameboardSpaceModel<T>>
    >,
  ): Promise<PostgrestSingleResponse<null>> {
    return (
      this.supabase
        .from(Table.GameboardSpace)
        // @ts-expect-error: for whatever reason, this doesn't accept the effect_data type as JSON
        .update(partialGameboardSpace)
        .eq('id', gameboardSpaceId)
    );
  }

  async deleteGameboardSpaceType(
    gameboardSpaceId: number,
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.GameboardSpace)
      .delete()
      .eq('id', gameboardSpaceId);
  }

  async logRoundMoves(
    roundNumber: number,
    playerSpaceChanges: GameboardSpaceEntryFormModel,
  ): Promise<PostgrestSingleResponse<undefined>> {
    return this.supabase.rpc(Function.LogRoundMoves, {
      roundnumber: roundNumber,
      playermoves: playerSpaceChanges as unknown as Json,
    });
  }

  async getMovesForCurrentRound(): Promise<
    PostgrestResponse<MovesForCurrentRoundModel>
  > {
    return this.supabase.from(View.MovesForCurrentRound).select();
  }
}
