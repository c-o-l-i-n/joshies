import { inject, Injectable, Signal } from '@angular/core';
import {
  GameboardSpaceModel,
  OmitAutoGeneratedColumns,
  SpecialSpaceEventModel,
  SpecialSpaceEventsForCurrentRoundModel,
  SpecialSpaceEventTemplateModel,
  SpecialSpaceEventType,
} from '../util/supabase-types';
import {
  PostgrestResponse,
  PostgrestSingleResponse,
  SupabaseClient,
} from '@supabase/supabase-js';
import {
  Function,
  GameboardSpaceEffect,
  realtimeUpdatesFromTable,
  SpaceEventStatus,
  Table,
  View,
} from '../util/supabase-helpers';
import { GameboardSpaceEntryFormModel } from '../../gm-tools/feature/gameboard-space-entry-page.component';
import { Database, Json } from '../util/schema';
import { map, Observable, shareReplay } from 'rxjs';
import { whenNotNull } from '../util/rxjs-helpers';
import { toSignal } from '@angular/core/rxjs-interop';
import { GameStateService } from './game-state.service';
import { ActivatedRoute } from '@angular/router';

@Injectable({
  providedIn: 'root',
})
export class GameboardService {
  private readonly supabase: SupabaseClient<Database> = inject(SupabaseClient);
  private readonly gameStateService = inject(GameStateService);
  private readonly activatedRoute = inject(ActivatedRoute);

  readonly gameboardSpaces$: Observable<GameboardSpaceModel[] | null> =
    this.gameStateService.sessionId$.pipe(
      whenNotNull((activeSessionId) =>
        (
          realtimeUpdatesFromTable(
            this.supabase,
            Table.GameboardSpace,
            `session_id=eq.${activeSessionId}`,
          ) as Observable<GameboardSpaceModel[]>
        ).pipe(map((spaces) => spaces.sort((a, b) => a.id - b.id))),
      ),
      shareReplay(1),
    );

  readonly specialSpaceEventTemplates$: Observable<
    SpecialSpaceEventTemplateModel[] | null
  > = this.gameStateService.sessionId$.pipe(
    whenNotNull(
      (activeSessionId) =>
        realtimeUpdatesFromTable(
          this.supabase,
          Table.SpecialSpaceEventTemplate,
          `session_id=eq.${activeSessionId}`,
        ) as unknown as Observable<SpecialSpaceEventTemplateModel[]>,
    ),
    shareReplay({ bufferSize: 1, refCount: true }),
  );

  readonly gameboardSpaces: Signal<GameboardSpaceModel[] | null | undefined> =
    toSignal(this.gameboardSpaces$);

  getRealtimeUpdatesFromSpecialSpaceEvent(
    specialSpaceEventId: SpecialSpaceEventModel['id'],
  ): Observable<SpecialSpaceEventModel | null> {
    return realtimeUpdatesFromTable(
      this.supabase,
      Table.SpecialSpaceEvent,
      `id=eq.${specialSpaceEventId}`,
    ).pipe(
      map((specialSpaceEventRecords) => specialSpaceEventRecords[0] ?? null),
      shareReplay({ bufferSize: 1, refCount: true }),
    );
  }

  async createNewGameboardSpaceType<T extends GameboardSpaceEffect>(
    gameboardSpace: OmitAutoGeneratedColumns<GameboardSpaceModel<T>>,
  ): Promise<PostgrestSingleResponse<null>> {
    return (
      this.supabase
        .from(Table.GameboardSpace)
        // @ts-expect-error: for whatever reason, this doesn't accept the effect_data type as JSON
        .insert([gameboardSpace])
    );
  }

  async updateGameboardSpaceType<T extends GameboardSpaceEffect>(
    gameboardSpaceId: number,
    partialGameboardSpace: Partial<
      OmitAutoGeneratedColumns<GameboardSpaceModel<T>>
    >,
  ): Promise<PostgrestSingleResponse<null>> {
    return (
      this.supabase
        .from(Table.GameboardSpace)
        // @ts-expect-error: for whatever reason, this doesn't accept the effect_data type as JSON
        .update(partialGameboardSpace)
        .eq('id', gameboardSpaceId)
    );
  }

  async deleteGameboardSpaceType(
    gameboardSpaceId: number,
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.GameboardSpace)
      .delete()
      .eq('id', gameboardSpaceId);
  }

  async createNewSpecialSpaceEventTemplate<T extends SpecialSpaceEventType>(
    eventTemplate: OmitAutoGeneratedColumns<SpecialSpaceEventTemplateModel<T>>,
  ): Promise<PostgrestSingleResponse<null>> {
    return (
      this.supabase
        .from(Table.SpecialSpaceEventTemplate)
        // @ts-expect-error: for whatever reason, this doesn't accept the effect_data type as JSON
        .insert([eventTemplate])
    );
  }

  async updateSpecialSpaceEventTemplate<T extends SpecialSpaceEventType>(
    gameboardSpaceId: number,
    partialSpecialSpaceEventTemplate: Partial<
      OmitAutoGeneratedColumns<SpecialSpaceEventTemplateModel<T>>
    >,
  ): Promise<PostgrestSingleResponse<null>> {
    return (
      this.supabase
        .from(Table.SpecialSpaceEventTemplate)
        // @ts-expect-error: for whatever reason, this doesn't accept the effect_data type as JSON
        .update(partialSpecialSpaceEventTemplate)
        .eq('id', gameboardSpaceId)
    );
  }

  async deleteSpecialSpaceEventTemplate(
    specialSpaceEventTemplateId: number,
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.SpecialSpaceEventTemplate)
      .delete()
      .eq('id', specialSpaceEventTemplateId);
  }

  async logRoundMoves(
    roundNumber: number,
    playerSpaceChanges: GameboardSpaceEntryFormModel,
  ): Promise<PostgrestSingleResponse<undefined>> {
    return this.supabase.rpc(Function.LogRoundMoves, {
      roundnumber: roundNumber,
      playermoves: playerSpaceChanges as unknown as Json,
    });
  }

  async getSpecialSpaceEventsForCurrentRound(): Promise<
    PostgrestResponse<SpecialSpaceEventsForCurrentRoundModel>
  > {
    return this.supabase.from(View.SpecialSpaceEventsForCurrentRound).select();
  }

  async selectSpecialSpaceEventTemplate(
    specialSpaceEventId: SpecialSpaceEventModel['id'],
    specialSpaceEventTemplateId: SpecialSpaceEventTemplateModel['id'],
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.SpecialSpaceEvent)
      .update({
        template_id: specialSpaceEventTemplateId,
        status: SpaceEventStatus.WaitingToBegin,
      })
      .eq('id', specialSpaceEventId);
  }

  async startSpecialSpaceEvent(
    specialSpaceEventId: SpecialSpaceEventModel['id'],
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.SpecialSpaceEvent)
      .update({
        status: SpaceEventStatus.InProgress,
      })
      .eq('id', specialSpaceEventId);
  }

  async submitSpecialSpaceEventScore(
    specialSpaceEventId: SpecialSpaceEventModel['id'],
    score: number,
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.SpecialSpaceEvent)
      .update({
        status: SpaceEventStatus.Finished,
        results: { score },
      })
      .eq('id', specialSpaceEventId);
  }
}
