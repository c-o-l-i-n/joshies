import { inject, Injectable } from '@angular/core';
import { PostgrestSingleResponse, SupabaseClient } from '@supabase/supabase-js';
import { Database } from '../util/schema';
import { GameStateService } from './game-state.service';
import { map, Observable, shareReplay, take } from 'rxjs';
import {
  EventModel,
  EventTeamModel,
  OmitAutoGeneratedColumns,
} from '../util/supabase-types';
import { whenNotNull } from '../util/rxjs-helpers';
import {
  Function,
  realtimeUpdatesFromTable,
  showMessageOnError,
  StorageBucket,
  Table,
} from '../util/supabase-helpers';
import { toSignal } from '@angular/core/rxjs-interop';
import { resizeImage } from '../util/image-helpers';
import { MessageService } from 'primeng/api';

@Injectable({
  providedIn: 'root',
})
export class EventService {
  private readonly supabase: SupabaseClient<Database> = inject(SupabaseClient);
  private readonly gameStateService = inject(GameStateService);
  private readonly messageService = inject(MessageService);

  readonly events$: Observable<EventModel[]> =
    this.gameStateService.sessionId$.pipe(
      switchMap((sessionId) =>
        realtimeUpdatesFromTable(
          this.supabase,
          Table.Event,
          `session_id=eq.${sessionId}`,
        ).pipe(
          map((events) =>
            events.sort((a, b) => a.round_number - b.round_number),
          ),
        ),
      ),
      shareReplay(1),
    );

  readonly eventForThisRound$: Observable<EventModel | null> =
    this.gameStateService.roundNumber$.pipe(
      switchMap((roundNumber) =>
        this.events$.pipe(
          map(
            (events) =>
              events?.find((event) => event.round_number === roundNumber) ??
              null,
          ),
        ),
      ),
    );

  readonly eventForNextRound$: Observable<EventModel | null> =
    this.gameStateService.roundNumber$.pipe(
      switchMap((roundNumber) =>
        this.events$.pipe(
          map(
            (events) =>
              events?.find((event) => event.round_number === roundNumber + 1) ??
              null,
          ),
        ),
      ),
    );

  readonly events = toSignal(this.events$);

  readonly eventTeams$: Observable<EventTeamModel[] | null> = this.events$.pipe(
    map((events) => events?.map((ev) => ev.id)),
    whenNotNull((events) =>
      realtimeUpdatesFromTable(
        this.supabase,
        Table.EventTeam,
        `event_id=in.(${events})`,
      ),
    ),
    take(1), // take 1 so selected tournament bracket nodes aren't periodically overwritten
    shareReplay(1),
  );

  readonly eventTeams = toSignal(this.eventTeams$);

  async createEvent(
    event: OmitAutoGeneratedColumns<EventModel>,
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase.from(Table.Event).insert(event);
  }

  async updateEvent(
    eventId: number,
    partialEvent: Partial<OmitAutoGeneratedColumns<EventModel>>,
  ): Promise<PostgrestSingleResponse<null>> {
    return this.supabase
      .from(Table.Event)
      .update(partialEvent)
      .eq('id', eventId);
  }

  async deleteEvent(eventId: number): Promise<PostgrestSingleResponse<null>> {
    return this.supabase.from(Table.Event).delete().eq('id', eventId);
  }

  async reorderEvents(
    eventsWithNewRoundNumber: Record<number, number>,
  ): Promise<PostgrestSingleResponse<undefined>> {
    return this.supabase.rpc(Function.ReorderEvents, {
      events_with_new_round_number: eventsWithNewRoundNumber,
    });
  }

  //Upload a given image to supabase. Return its new address to be displayed & saved
  async uploadImage(image: File): Promise<string> {
    const resizedImage = await resizeImage(image, 200);
    const uploadPath = `events/${Date.now()}.webp`;

    const { data: uploadData, error: uploadError } = await showMessageOnError(
      this.supabase.storage
        .from(StorageBucket.EventImages)
        .upload(uploadPath, resizedImage),
      this.messageService,
    );

    if (uploadError) {
      return '';
    }

    return this.supabase.storage
      .from(StorageBucket.EventImages)
      .getPublicUrl(uploadData.path).data.publicUrl;
  }
}
