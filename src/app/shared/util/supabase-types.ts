import { Database, Enums, Tables } from './schema';
import { Table, View, Function } from './supabase-helpers';

type PublicSchema = Database[Extract<keyof Database, 'public'>];

// based on the Tables type generated by the Supabase CLI in ./schema
type FunctionReturnType<
  PublicTableNameOrOptions extends
    | keyof PublicSchema['Functions']
    | { schema: keyof Database },
  FunctionName extends PublicTableNameOrOptions extends {
    schema: keyof Database;
  }
    ? keyof Database[PublicTableNameOrOptions['schema']]['Functions']
    : never = never,
> = PublicTableNameOrOptions extends { schema: keyof Database }
  ? Database[PublicTableNameOrOptions['schema']]['Functions'][FunctionName] extends {
      Returns: infer R;
    }
    ? R
    : never
  : PublicTableNameOrOptions extends keyof PublicSchema['Functions']
    ? PublicSchema['Functions'][PublicTableNameOrOptions] extends {
        Returns: infer R;
      }
      ? R
      : never
    : never;

// tables
export type GameStateModel = Tables<Table.GameState>;
export type PlayerModel = Tables<Table.Player>;
export type PlayerRoundScoreModel = Tables<Table.PlayerRoundScore>;
export type RulesModel = Tables<Table.Rules>;
export type SessionModel = Tables<Table.Session>;
export type TransactionModel = Tables<Table.Transaction>;
export type UserModel = Tables<Table.User>;
export type UserNotificationsSubscriptionModel =
  Tables<Table.UserNotificationsSubscription>;

// views
export type LifetimeUserStatsModel = Tables<View.LifetimeUserStats>;

// enums
export type SessionStatusType = Enums<'session_status'>;

// functions
export type GetPlayerRoundScoreFunctionReturnType =
  FunctionReturnType<Function.GetPlayerRoundScoresFromSession>;
