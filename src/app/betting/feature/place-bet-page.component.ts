import {
  ChangeDetectionStrategy,
  Component,
  computed,
  effect,
  inject,
  signal,
} from '@angular/core';
import { PageHeaderComponent } from '../../shared/ui/page-header.component';
import { HeaderLinkComponent } from '../../shared/ui/header-link.component';
import {
  PlayerService,
  PlayerWithUserAndRankInfo,
} from '../../shared/data-access/player.service';
import { FormsModule } from '@angular/forms';
import { ButtonModule } from 'primeng/button';
import { ConfirmationService, MessageService } from 'primeng/api';
import { ActivatedRoute, Router } from '@angular/router';
import { InputTextareaModule } from 'primeng/inputtextarea';
import { CheckboxModule } from 'primeng/checkbox';
import { InputNumberModule } from 'primeng/inputnumber';
import { BetService } from '../../shared/data-access/bet.service';
import {
  BetModel,
  OmitAutoGeneratedColumns,
} from '../../shared/util/supabase-types';
import { SessionService } from '../../shared/data-access/session.service';
import { DropdownModule } from 'primeng/dropdown';
import { confirmBackendAction } from '../../shared/util/dialog-helpers';
import { BetStatus } from '../../shared/util/supabase-helpers';

@Component({
  selector: 'joshies-override-points-page',
  standalone: true,
  imports: [
    PageHeaderComponent,
    HeaderLinkComponent,
    FormsModule,
    ButtonModule,
    InputTextareaModule,
    CheckboxModule,
    InputNumberModule,
    DropdownModule,
  ],
  template: `
    <joshies-page-header headerText="Place a Bet" alwaysSmall>
      <joshies-header-link
        text="Betting"
        routerLink=".."
        chevronDirection="left"
      />
    </joshies-page-header>

    <h4>Your score: {{ userPlayer()?.score }}</h4>

    <!-- Opponent Dropdown -->
    <!-- eslint-disable-next-line -->
    <label class="flex flex-column gap-2 mt-5">
      Opponent
      <p-dropdown
        [options]="playersWithoutUser()"
        [(ngModel)]="selectedOpponent"
        optionLabel="nameAndScore"
        styleClass="flex"
        placeholder="Select an opponent"
      />
    </label>

    <!-- Bet terms -->
    <label class="flex flex-column gap-2 mt-5">
      Bet Terms
      <textarea rows="2" pInputTextarea [(ngModel)]="terms" [required]="true">
      </textarea>
    </label>

    <!-- Even Odds Checkbox -->
    <!-- eslint-disable-next-line -->
    <label class="mt-5">
      <p-checkbox
        class="mt-5"
        [(ngModel)]="evenOdds"
        binary="true"
        (ngModelChange)="checkEvenOdds()"
      />
      Even Odds
    </label>

    <!-- Requester bet -->
    <!-- eslint-disable-next-line -->
    <label class="flex flex-column gap-2 mt-5">
      {{
        evenOdds()
          ? 'Both Bet'
          : (userPlayer()?.display_name ?? 'Bettor') + ' Bets'
      }}
      <p-inputNumber
        #inputRequesterBet
        [(ngModel)]="requesterBet"
        [showButtons]="true"
        buttonLayout="horizontal"
        [step]="1"
        min="1"
        [allowEmpty]="false"
        incrementButtonIcon="pi pi-plus"
        decrementButtonIcon="pi pi-minus"
        inputStyleClass="w-full font-semibold text-right"
        styleClass="w-full"
        (ngModelChange)="checkEvenOdds()"
      />
    </label>

    @if (!evenOdds()) {
      <!-- Opponent bet -->
      <!-- eslint-disable-next-line -->
      <label class="flex flex-column gap-2 mt-5">
        {{ selectedOpponent()?.display_name ?? 'Opponent' }} Bets
        <p-inputNumber
          #inputOpponentBet
          [(ngModel)]="opponentBet"
          [showButtons]="true"
          buttonLayout="horizontal"
          [step]="1"
          min="1"
          [allowEmpty]="false"
          incrementButtonIcon="pi pi-plus"
          decrementButtonIcon="pi pi-minus"
          inputStyleClass="w-full font-semibold text-right"
          styleClass="w-full"
        />
      </label>
    }

    <!-- Submit Button -->
    <p-button
      label="Submit Bet"
      styleClass="w-full mt-5"
      (onClick)="confirmSubmit()"
      [disabled]="submitButtonDisabled()"
      [loading]="submitting()"
    />
  `,
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export default class PlaceBetPageComponent {
  private readonly playerService = inject(PlayerService);
  private readonly messageService = inject(MessageService);
  private readonly router = inject(Router);
  private readonly activatedRoute = inject(ActivatedRoute);
  private readonly betService = inject(BetService);
  private readonly sessionService = inject(SessionService);
  private readonly confirmationService = inject(ConfirmationService);

  readonly terms = signal('');
  readonly requesterBet = signal(1);
  readonly opponentBet = signal(1);
  readonly evenOdds = signal(true);
  readonly submitting = signal(false);
  readonly userPlayer = this.playerService.userPlayer;
  readonly selectedOpponent = signal<PlayerWithUserAndRankInfo | null>(null);

  readonly playersWithoutUser = computed(() => {
    return this.playerService
      .players()
      ?.filter((player) => player.user_id !== this.userPlayer()!.user_id)
      .map((player) => {
        return {
          userId: player.user_id,
          nameAndScore: player.display_name + ' (' + player.score + ' points)',
          score: player.score,
          player_id: player.player_id,
          display_name: player.display_name,
        };
      });
  });

  readonly submitButtonDisabled = computed(() => {
    const userScore = this.userPlayer()?.score ?? 0;
    const opponentScore = this.selectedOpponent()?.score ?? 0;
    return (
      this.submitting() ||
      !this.terms() ||
      !this.selectedOpponent() ||
      !this.userPlayer() ||
      this.requesterBet() > userScore ||
      this.opponentBet() > opponentScore
    );
  });

  checkEvenOdds(): void {
    if (this.evenOdds()) {
      this.opponentBet.set(this.requesterBet());
    }
  }

  async confirmSubmit(): Promise<void> {
    const bet: OmitAutoGeneratedColumns<BetModel> = {
      description: this.terms(),
      requester_player_id: this.userPlayer()?.player_id ?? 0,
      opponent_player_id: this.selectedOpponent()?.player_id ?? 0,
      requester_wager: this.requesterBet(),
      opponent_wager: this.opponentBet(),
      session_id: this.sessionService.session()?.id ?? 0,
      status: BetStatus.PendingAcceptance,
    };

    const opponentDisplayName =
      this.selectedOpponent()?.display_name ?? 'opponent';

    confirmBackendAction({
      action: async () => this.betService.createBet(bet),
      confirmationMessageText: `Are you sure you want to request this bet against ${opponentDisplayName}?`,
      successMessageText: 'Bet request submitted',
      submittingSignal: this.submitting,
      confirmationService: this.confirmationService,
      messageService: this.messageService,
      successNavigation: '..',
      activatedRoute: this.activatedRoute,
      router: this.router,
    });
  }

  // When player list changes (e.g. someone's score changes externally)
  // clear selected opponent so it doesn't get orphaned
  constructor() {
    effect(
      () => {
        this.playersWithoutUser();
        this.selectedOpponent.set(null);
      },
      { allowSignalWrites: true },
    );
  }
}
