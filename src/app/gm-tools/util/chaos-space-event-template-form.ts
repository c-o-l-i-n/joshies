import { computed, Signal, WritableSignal } from '@angular/core';
import { FormBuilder, Validators } from '@angular/forms';
import {
  FormField,
  FormFieldType,
} from '../../shared/ui/form-field/form-field.component';
import { confirmBackendAction } from '../../shared/util/dialog-helpers';
import {
  formValueSignal,
  ModelFormGroup,
} from '../../shared/util/form-helpers';
import { Form } from '../../shared/ui/form.component';
import { GameStateService } from '../../shared/data-access/game-state.service';
import { ActivatedRoute, Router } from '@angular/router';
import { ConfirmationService, MessageService } from 'primeng/api';
import { PostgrestSingleResponse } from '@supabase/supabase-js';
import {
  ChaosSpaceEventType,
  OmitAutoGeneratedColumns,
  ChaosSpaceEventDetails,
  ChaosSpaceEventTemplateModel,
} from '../../shared/util/supabase-types';

export interface ChaosSpaceEventTemplateForm {
  name: string;
  description: string;
  type: ChaosSpaceEventType;
  lastPlacePoints: number;
  taskName: string;
  percentageLoss: number;
}

export function chaosSpaceEventTemplateFormFactory(
  saveMethod: (
    chaosSpaceEventTemplate: OmitAutoGeneratedColumns<ChaosSpaceEventTemplateModel>,
  ) => Promise<PostgrestSingleResponse<null>>,
  submitButtonText: (spaceName: string) => string,
  successText: (spaceName: string) => string,
  formBuilder: FormBuilder,
  submittingSignal: WritableSignal<boolean>,
  formDisabledSignal: Signal<boolean>,
  confirmDialogKey: string,
  gameStateService: GameStateService,
  router: Router,
  activatedRoute: ActivatedRoute,
  confirmationService: ConfirmationService,
  messageService: MessageService,
): {
  chaosSpaceEventTemplateForm: Form;
  chaosSpaceEventTemplateFormGroup: ModelFormGroup<ChaosSpaceEventTemplateForm>;
  chaosSpaceEventTemplateFormValue: Signal<ChaosSpaceEventTemplateForm>;
  chaosSpaceEventTemplateName: Signal<string>;
  chaosSpaceEventType: Signal<ChaosSpaceEventType>;
} {
  const chaosSpaceEventTemplateFormGroup: ModelFormGroup<ChaosSpaceEventTemplateForm> =
    formBuilder.nonNullable.group({
      name: ['', Validators.required],
      description: ['', Validators.required],
      type: [
        ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPoints as ChaosSpaceEventType,
        Validators.required,
      ],
      lastPlacePoints: [24, Validators.min(1)],
      taskName: ['', Validators.required],
      percentageLoss: [10, [Validators.min(1), Validators.max(100)]],
    });

  const { controls } = chaosSpaceEventTemplateFormGroup;

  const chaosSpaceEventTemplateFormValue: Signal<ChaosSpaceEventTemplateForm> =
    formValueSignal(chaosSpaceEventTemplateFormGroup);

  const chaosSpaceEventType: Signal<ChaosSpaceEventType> = computed(
    () => chaosSpaceEventTemplateFormValue().type,
  );

  const chaosSpaceEventTemplateName: Signal<string> = computed(
    () => chaosSpaceEventTemplateFormValue().name,
  );

  const chaosSpaceEventTemplateForm = {
    formGroup: chaosSpaceEventTemplateFormGroup,
    disabled: formDisabledSignal,
    fields: computed((): FormField[] => [
      {
        control: controls.name,
        type: FormFieldType.Text,
        name: 'name',
        label: 'Name',
        placeholder: 'Name',
      },
      {
        control: controls.description,
        type: FormFieldType.TextArea,
        name: 'description',
        label: 'Description',
        placeholder: 'Description',
      },
      {
        control: controls.type,
        type: FormFieldType.Dropdown,
        name: 'type',
        label: 'Type',
        placeholder: 'Type',
        disabled: [
          ChaosSpaceEventType.EveryoneGainsPointsBasedOnRank,
          ChaosSpaceEventType.PointSwap,
        ].includes(controls.type.value),
        options: Object.values(ChaosSpaceEventType).map(
          (chaosSpaceEventType) => ({
            label: chaosSpaceEventType
              .replace(/_/g, ' ')
              .replace(/\b\w/g, (char) => char.toUpperCase()),
            value: chaosSpaceEventType,
            disabled: [
              ChaosSpaceEventType.EveryoneGainsPointsBasedOnRank,
              ChaosSpaceEventType.PointSwap,
            ].includes(chaosSpaceEventType),
          }),
        ),
      },
      {
        control: controls.lastPlacePoints,
        type: FormFieldType.Number,
        name: 'last-place-points',
        label: 'Number of Points Last Place Player Receives',
        min: 1,
        required:
          controls.type.value ===
          ChaosSpaceEventType.EveryoneGainsPointsBasedOnRank,
        visible:
          controls.type.value ===
          ChaosSpaceEventType.EveryoneGainsPointsBasedOnRank,
      },
      {
        control: controls.taskName,
        type: FormFieldType.Text,
        name: 'task-name',
        label: 'Task Name',
        placeholder: 'stand on 1 foot for 5 minutes',
        required:
          controls.type.value ===
          ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPointsBasedOnTaskFailure,
        visible:
          controls.type.value ===
          ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPointsBasedOnTaskFailure,
      },
      {
        control: controls.percentageLoss,
        type: FormFieldType.Number,
        name: 'percentage-loss',
        label: 'Percentage Loss',
        min: 0,
        max: 100,
        step: 5,
        suffix: '%',
        inputStyleClass: 'text-center',
        required: [
          ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPoints,
          ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPointsBasedOnTaskFailure,
        ].includes(chaosSpaceEventType()),
        visible: [
          ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPoints,
          ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPointsBasedOnTaskFailure,
        ].includes(chaosSpaceEventType()),
      },
      {
        type: FormFieldType.Submit,
        name: 'submit',
        label: submitButtonText(chaosSpaceEventTemplateName()),
        loading: submittingSignal(),
        position: 'full',
      },
    ]),
    onSubmit: () =>
      confirmSubmit(
        chaosSpaceEventTemplateFormValue(),
        gameStateService.sessionId()!,
        confirmDialogKey,
      ),
  };

  async function confirmSubmit(
    formValue: ChaosSpaceEventTemplateForm,
    sessionId: number,
    confirmDialogKey: string,
  ) {
    const { name, description, type } = formValue;

    const details = getChaosSpaceEventTemplateDetails(formValue);

    confirmBackendAction({
      action: () =>
        saveMethod({
          name,
          description,
          type,
          session_id: sessionId,
          details,
        }),
      successMessageText: successText(name),
      successNavigation: '..',
      confirmDialogKey,
      submittingSignal,
      router: router,
      activatedRoute: activatedRoute,
      confirmationService: confirmationService,
      messageService: messageService,
    });
  }

  return {
    chaosSpaceEventTemplateForm,
    chaosSpaceEventTemplateFormGroup,
    chaosSpaceEventTemplateFormValue,
    chaosSpaceEventTemplateName,
    chaosSpaceEventType,
  };
}

function getChaosSpaceEventTemplateDetails<
  T extends ChaosSpaceEventType = ChaosSpaceEventType,
>(formValue: ChaosSpaceEventTemplateForm): ChaosSpaceEventDetails<T> {
  const { type, lastPlacePoints, percentageLoss, taskName } = formValue;

  switch (type) {
    case ChaosSpaceEventType.EveryoneGainsPointsBasedOnRank:
      return {
        lastPlacePoints,
      } as ChaosSpaceEventDetails<T>;

    case ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPoints:
      return {
        percentageLoss,
      } as ChaosSpaceEventDetails<T>;

    case ChaosSpaceEventType.EveryoneLosesPercentageOfTheirPointsBasedOnTaskFailure:
      return {
        percentageLoss,
        taskName,
      } as ChaosSpaceEventDetails<T>;

    case ChaosSpaceEventType.PointSwap:
      return {} as ChaosSpaceEventDetails<T>;
  }
}
